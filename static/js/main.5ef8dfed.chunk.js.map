{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","isLoading","expr","fields","field","data","state","setState","useEffect","s","axios","get","then","res","FieldValuesResponse","className","type","id","defaultValue","placeholder","onClick","d","query","document","getElementById","value","f","replace","Field","undefined","FieldValues","map","i","key","FieldValue","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"20BAIA,IAyDeA,EAzDH,WAAO,IAAD,EACUC,mBAAS,CAAEC,WAAW,EAAOC,KAAM,eAAgBC,OAAQ,GAAIC,MAAO,YAAaC,KAAM,KADnG,mBACTC,EADS,KACFC,EADE,KAgChB,OAVAC,qBAAU,WAEND,GAAS,SAACE,GAAD,YAAaA,EAAb,CAAgBR,WAAW,OACpCS,IAAMC,IAAN,0EAA6EL,EAAMJ,KAAnF,kBAAiGI,EAAMF,QACpGQ,MAAK,SAACC,GACLN,GAAS,SAACE,GAAD,YAAaA,EAAb,CAAgBR,WAAW,EAAOI,KAAMQ,EAAIR,KAAKS,8BAI/D,CAACR,EAAMJ,KAAMI,EAAMF,QAEpB,yBAAKW,UAAU,OACb,oDACA,yCAFF,IAEwB,2BAAOC,KAAK,OAAOD,UAAU,OAAOE,GAAG,SAASC,aAAa,eAAeC,YAAY,gBAC9G,wCAHF,IAGuB,2BAAOH,KAAK,OAAOD,UAAU,OAAOE,GAAG,QAAQC,aAAa,YAAYC,YAAY,gBACzG,4BAAQC,QAlCG,SAACC,GACd,IAAIC,EAAQC,SAASC,eAAe,UAAUC,MAC1CC,EAAIH,SAASC,eAAe,SAASC,MACzCH,EAAQA,EAAMK,QAAQ,KAAM,KAC5BpB,EAAS,EAAD,GAAMD,EAAN,CAAaJ,KAAMoB,EAAOlB,MAAOsB,OA8BvC,WACqB,IAApBpB,EAAML,UAAqB,4CAC1B,6BACE,yCAAeK,EAAMD,KAAKuB,YAECC,IAAzBvB,EAAMD,KAAKyB,YAAwB,KAAKxB,EAAMD,KAAKyB,YAAYC,KAAI,SAACL,EAAGM,GAAJ,OACjE,yBAAKC,IAAKD,GACR,6BAAMN,EAAEQ,WAAR,cCpCIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.5ef8dfed.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nconst App = () => {\n  const [state, setState] = useState({ isLoading: false, expr: 'heart+attack', fields: '', field: 'Condition', data: [], });\n\n  const search = (d) => {\n    let query = document.getElementById('search').value;\n    let f = document.getElementById('field').value;\n    query = query.replace(/ /g, '+');\n    setState({ ...state, expr: query, field: f });\n  }\n\n  // const procData = (jdt) => {\n\n  //   return Object.keys(jdt).map((dt, i) => {\n  //     if (typeof jdt[dt] === \"object\") {\n  //       return <ul key={i}>{dt} : {procData(jdt[dt])}</ul>;\n  //     } else {\n  //       return <li key={i}>{dt}: {jdt[dt]}</li>\n  //     }\n  //   })\n\n  // }\n\n  useEffect(() => {\n    function fdata() {\n      setState((s) => ({ ...s, isLoading: true }));\n      axios.get(`https://ClinicalTrials.gov/api/query/field_values?fmt=json&expr=${state.expr}&field=${state.field}`)\n        .then((res) => {\n          setState((s) => ({ ...s, isLoading: false, data: res.data.FieldValuesResponse }));\n        });\n    }\n    fdata();\n  }, [state.expr, state.field]);\n  return (\n    <div className=\"App\">\n      <h3>Field Values Search </h3>\n      <label>Search</label>:<input type=\"text\" className=\"inpt\" id=\"search\" defaultValue=\"heart attack\" placeholder=\"enter Query\" />\n      <label>Field</label>:<input type=\"text\" className=\"inpt\" id=\"field\" defaultValue=\"Condition\" placeholder=\"enter Field\" />\n      <button onClick={search}>Search</button>\n      {state.isLoading === true ? <div>Loading....</div> :\n        <div>\n          <label>Field: {state.data.Field}</label>\n          {\n            state.data.FieldValues===undefined?null:state.data.FieldValues.map((f, i) => (\n              <div key={i}>\n                <div>{f.FieldValue} : </div>\n              </div>\n            ))\n          }\n          \n          {/* <h5>Rank : {data.Rank}</h5><h5> Study: </h5>\n            {procData(data.Study)} */}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}